1. Часова і просторова складності алгоритму рекурсивного обчислення чисел Фібоначчі:

Часова складність O(2^n):
У рекурсивному алгоритмі, для обчислення fibonacci(n), два рекурсивні виклики виконуються для fibonacci(n - 1) і
fibonacci(n - 2). Кожен з них розгалужується на два дочірні виклики, що приводить до експоненційного росту кількості
викликів.
Завдяки цьому, часова складність алгоритму дорівнює O(2^n).

Просторова складність O(n):
Просторова складність визначається кількістю додаткового простору (пам'яті), який потрібен для виконання програми.
У рекурсивному варіанті алгоритму для кожного виклику функції потрібно зберігати локальні змінні, такі як аргументи
функції та проміжні результати. Глибина рекурсії для числа n становить n, тобто просторова складність дорівнює O(n).
__________________________________
2. Часова і просторова складність алгоритму динамічного програмування:

Часова складність:
Рекурсивний виклик для обчислення n-го числа Фібоначчі здійснюється за час O(2^n), оскільки кожне число обчислюється як
 сума двох попередніх. Однак завдяки використання memo часова складність зменшується до O(n).

Просторова складність:
Завдяки memo, просторова складність також зменшується, оскільки зберігаються лише значення для кожного вже обчисленого
числа Фібоначчі. Просторова складність дорівнює кількість унікальних значень, які потрібно зберегти в memo.
В даному випадку, просторова складність є O(n), оскільки є n унікальних значень для чисел Фібоначчі від 0 до n.
___________________________________

3. Часова і просторова складність ітеративної реалізації алгоритму.

Часова складність:
Кожне число Фібоначчі обчислюється за один прохід циклу for, тому часова складність цієї ітеративної реалізації є O(n),
 де n - номер числа Фібоначчі, яке потрібно обчислити.

Просторова складність:
Просторова складність цього методу є O(1), оскільки кількість використовуваних додаткових змінних не змінюється зі
збільшенням вхідного n.



